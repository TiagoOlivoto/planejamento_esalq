---
title: "Planejamento, coleta e organização de dados com suporte de planilhas e aplicativos"
subtitle: "Disciplina de Pesquisa e Redação Científica"
author: "Prof. Dr. Tiago Olivoto"
institute: "LEMGAD/NEPEM/UFSC"
date: today
format: 
  html:
    theme: cosmo        # pode trocar: cosmo, journal, flatly, united, etc
    toc: true           # ativa sumário
    toc-depth: 3
    toc-location: left
    number-sections: true
    code-fold: true     # código dobrável
    code-tools: true    # botão de copiar código
    df-print: paged
    page-layout: article
    fontsize: 14pt
    linestretch: 1.5
    smooth-scroll: true
    title-block-banner: "#1AB281"  # cor do banner do título
    title-block-style: default
    title-block-banner-color: white
    mainfont: "Arial"
    monofont: "Fira Code"
---

# Pacotes
```{r}
required_pkgs <- c(
  "tidyverse",
  "FielDHub",
  "qrlabelr",
  "uuid",
  "cli",
  "rio",
  "AgroR",
  "patchwork"
)
renv::init(bare = TRUE)
renv::install(required_pkgs)
renv::snapshot()
```


```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(FielDHub)
library(qrlabelr)
library(uuid)
library(cli)
library(rio)
library(AgroR)
library(patchwork)

```

# Estrutura da pasta
```{r echo=FALSE}
library(fs)
fs::dir_tree(here::here(), recurse = 1)
```


# Aplicativo
Fazer o download do aplicativo [FieldBook](https://play.google.com/store/apps/details?id=com.fieldbook.tracker&hl=pt_BR), disponível para Android


# Funções auxiliares
```{r}
source("funcoes_planejamento.R")

```



# Experimentos unifatoriais
## Caderno de campo
```{r}

trats <- c("NEPEM01", "TESTEMUNHA", "GEN01", "GEN02", "GEN03", "GEN04", "GEN05", "GEN06")

dic <- unifatorial(trats,
                   seed = 123,
                   exp_name = "Ensaio Batata")


dbc <- unifatorial(trats,
                   seed = 123,
                   design = "RCBD",
                   layout = "custom",
                   layout_allocation = c(2, 4),
                   exp_name = "Ensaio Batata")

export(dbc$fieldbook, "caderno_dbc.xlsx")

```



## Croqui
```{r}
dic[["fieldmap"]]
ggsave("croqui_dic.pdf",
       width = 10,
       height = 5)


dbc[["fieldmap"]]
ggsave("croqui_dbc_2x4.pdf",
       width = 10,
       height = 5)


```


## Etiquetas

**Somente executar quando tiver o caderno de campo**
```{r}
#| eval: false


qrlabelr::gp_label(dat = as.data.frame(dbc$fieldbook),
                   # Top left 1
                   top_left_txt1 = 'Trat:',
                   top_left_id1 = 'TREATMENT',
                   # Top left 2
                   top_left_txt2 = 'Linha:',
                   top_left_id2 = 'ROW',
                   # Top right 1
                   # top_right_txt1 = 'Bloco:',
                   # top_right_id1 = 'REP',
                   # Top right 2
                   top_right_txt2 = 'Col:',
                   top_right_id2 = 'COL',
                   # Bottom left 1
                   bottom_left_txt1 = "Experimento:",
                   bottom_left_id1 = "LOCATION",
                   # Bottom left 2
                   bottom_left_txt2 = "Bloco:",
                   bottom_left_id2 = "REP",
                   # Center 1
                   center_right_txt1 = "Parcela:",
                   center_right_id1 = "PLOT",
                   # Center 2
                   # center_right_txt2 = "Protocolo:",
                   # center_right_id2 = "LOCATION",
                   # Center 3
                   # center_right_txt3 = "Col",
                   # center_right_id3 = "COLUMN",
                   filename = "test.pdf",
                   # Page size
                   page_wdt = 8.27,
                   page_hgt = 11.72,
                   top_mar = 0,
                   bot_mar = 0,
                   left_mar = 0.25,
                   right_mar = 0.25,
                   # Layout
                   numrow = 9,
                   numcol = 3,
                   font_sz = 10,
                   rname = "Olivoto",
                   get_unique_id = "custom",
                   unique_id =  "UNIQUE_ID",
                   family = "sans")
```


## Caderno a nível de planta
```{r}
caderno_planta <- 
  dbc$fieldbook |>
  mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |> 
  separate_longer_delim(cols = PLANTA, delim = ",") |> 
  mutate(UNIQUE_ID = UUIDgenerate(n = 160))


export(caderno_planta, "caderno_planta.xlsx")

```


# Experimentos Fatoriais

```{r}
trats <- c("NEPEM01", "TESTEMUNHA", "GEN01", "GEN02", "GEN03", "GEN04", "GEN05", "GEN06")

fat <- 
  full_factorial(
    factors = c("GEN", "EPOCA"),
    nlevels = c(8, 3),
    design = "RCBD",
    levels = c(trats, "E1", "E2", "E3"),
    fill_color = FALSE,
    layout = "custom",
    layout_allocation = c(4, 6)
  )

```





# Manipulação e organização de dados

**Desafio**

Na pasta data, são encontrados quatro conjuntos de dados.

* `capsulas.xlsx` resultado da contagem de cápsulas de genótipos de linhaça.
* `graos.csv` resultado da contagem de grãos de genótipos de linhaça.
* `laboratório` dados obtidos da avaliação das plantas.
* `mmg` dados da massa de mil grãos dos genótipos

O desafio consistirá em combinar calcular o número de grãos e cápsulas de cada planta, o comprimento e largura médio dos grãos de cada planta e juntar com as variáveis de plantas.

Em uma segunda etapa, computar os valores médios por genótipo, juntando com a massa de mil grãos.


```{r}
capsulas <- import("data/capsulas.xlsx")
graos <- import("data/graos.csv")
lab <- import("data/laboratorio.xlsx")
mmg <- import("data/mmg.xlsx")
```

# Estatísticas
```{r}
stat_grao <- 
  graos |> 
  group_by(img) |> 
  summarise(
    NG = n(),
    CG = mean(length),
    LG = mean(width)
  ) |> 
  mutate(INDIVIDUO = str_extract(img, "^[0-9]+") |> as.numeric()) |> 
  select(-img)

stat_caps <- 
  capsulas |> 
  group_by(img) |> 
  summarise(
    NC = n(),
  ) |> 
  mutate(INDIVIDUO = str_extract(img, "^[0-9]+") |> as.numeric()) |> 
  select(-img)


junto <- reduce(list(lab, stat_grao, stat_caps), left_join)
```


# Dados a nível de genótipo
```{r}
dfgen <- 
junto |> 
  group_by(TIPO, GEN) |> 
  summarise(across(AP:NC, \(x){mean(x, na.rm = TRUE)})) |> 
  drop_na() |> 
  left_join(mmg)


```


# Exploração
```{r}
ggplot(dfgen, aes(TIPO, AP)) +
  geom_boxplot()

```



